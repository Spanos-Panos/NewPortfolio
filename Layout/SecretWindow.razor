@namespace Portfolio.Layout
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web

@* SecretWindow.razor: Modern, responsive secret game window *@
<div class="secret-retro-bg" @onwheel:preventDefault tabindex="-1">
    <div class="secret-retro-window" tabindex="0">
        <div class="retro-header">
            <span class="retro-title">SECRET GAME HUB</span>
            <button class="retro-close-btn" @onclick="OnCloseClicked" title="Close">✖</button>
        </div>
        <div class="retro-main-screen">
            @if (IsGamePlaying && SelectedGame is not null)
            {
                <iframe src="@SelectedGame.Url" frameborder="0" class="retro-game-iframe"></iframe>
            }
            else
            {
                <div class="retro-screen-placeholder">
                    <span class="retro-screen-label">GAME SCREEN</span>
                </div>
            }
        </div>
        <div class="retro-game-list" style="width:100%;max-width:600px;align-items:stretch;">
            <div class="retro-list-label">GAMES</div>
            <div class="retro-game-grid" style="width:100%;">
                @for (int i = 0; i < 6; i++)
                {
                    var game = Games.Count > i ? Games[i] : null;
                    if (game is not null)
                    {
                        <div class="retro-game-item @(SelectedGame == game ? "selected" : null)" style="width:100%;" @onclick="() => SelectGame(game)">
                            <span class="retro-emoji-icon" style="background:@GetGameColor(game)">@GetGameEmoji(game)</span>
                            <span class="retro-game-title">@game.Title</span>
                        </div>
                    }
                    else
                    {
                        <div style="width:100%;"></div>
                    }
                }
            </div>
            <div class="retro-controls" style="width:100%;justify-content:space-between;margin:0.2em 0 0 0;">
                <button class="retro-btn retro-exit" style="flex:1;max-width:33%;" @onclick="ExitGame">Exit</button>
                <button class="retro-btn retro-play" style="flex:1;max-width:33%;" @onclick="PlayGame" disabled="@(SelectedGame is null)">Play</button>
                <button class="retro-btn retro-retry" style="flex:1;max-width:33%;" @onclick="RetryGame" disabled="@(!IsGamePlaying)">Retry</button>
            </div>
        </div>
    </div>
</div>

@code {
    List<GameInfo> Games = new() {
        new GameInfo { Title = ".NET Snake", Emoji = "🐍", Url = "/games/snake-phaser.html" },
        new GameInfo { Title = "Slide Puzzle", Emoji = "🧩", Url = "/games/slide-puzzle-phaser.html" },
        new GameInfo { Title = "Tower Builder", Emoji = "🏗️", Url = "/games/tower-phaser.html" },
        new GameInfo { Title = "Tetris", Emoji = "🟪", Url = "/games/tetris-phaser.html" },
        new GameInfo { Title = "Minesweeper", Emoji = "💣", Url = "/games/minesweeper-phaser.html" },
        new GameInfo { Title = "About Me Quiz", Emoji = "🙋", Url = "/games/aboutme-phaser.html" },
    };

    string GetGameEmoji(GameInfo game) => game.Emoji ?? "❓";
    string GetGameColor(GameInfo game)
    {
        return game.Title switch
        {
            ".NET Snake" => "#2ecc40",
            "Slide Puzzle" => "#f1c40f",
            "Tower Builder" => "#8e44ad",
            "Tetris" => "#3498db",
            "Minesweeper" => "#e74c3c",
            "About Me Quiz" => "#ff9800",
            _ => "#888"
        };
    }
    GameInfo? SelectedGame;
    bool IsGamePlaying = false;

    void SelectGame(GameInfo game)
    {
        SelectedGame = game;
        IsGamePlaying = false;
    }
    void PlayGame()
    {
        if (SelectedGame is not null)
            IsGamePlaying = true;
    }
    void ExitGame()
    {
        IsGamePlaying = false;
        SelectedGame = null;
    }
    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => { IsGamePlaying = true; InvokeAsync(StateHasChanged); });
        }
    }
    [Parameter] public EventCallback OnClose { get; set; }
    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }
}
