@namespace Portfolio.Layout
@using Microsoft.JSInterop

@* SecretWindow.razor: Enhanced Retro Game Emulator *@
<div class="retro-emulator-container" tabindex="-1">
    
    <!-- CRT Screen Effects -->
    <div class="crt-overlay"></div>
    <div class="crt-scanlines"></div>
    <div class="crt-flicker"></div>
    
    <!-- Emulator Console -->
    <div class="emulator-console">
        <!-- Console Header -->
        <div class="console-header">
            <div class="console-brand">RETRO-EMU v3.0</div>
            <div class="console-power">
                <span class="power-led @(IsGamePlaying ? "active" : "")"></span>
                <button class="power-btn" @onclick="OnCloseClicked" title="Power Off">⏻</button>
            </div>
        </div>

        <!-- Main Layout Container -->
        <div class="emulator-layout @(IsGamePlaying ? "game-mode" : "menu-mode")">
            
            <!-- CRT Monitor Screen -->
            <div class="crt-monitor">
                <div class="crt-screen">
                    @if (ShowWelcome)
                    {
                        <div class="boot-screen">
                            <div class="boot-text">
                                <div class="boot-line">RETRO-EMU SYSTEM v3.0</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line">Initializing Hardware...</div>
                                <div class="boot-line">CPU: Z80A at 4MHz ✓</div>
                                <div class="boot-line">Memory: 64KB RAM ✓</div>
                                <div class="boot-line">Graphics: VDP ✓</div>
                                <div class="boot-line">Sound: Enhanced PSG ✓</div>
                                <div class="boot-line">Controllers: 2P ✓</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line">Loading Game Library...</div>
                                <div class="boot-line">Found @(Games.Count) cartridge(s)</div>
                                <div class="boot-line">Audio System: Ready ✓</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line terminal-cursor">System Ready</div>
                            </div>
                        </div>
                    }
                    else if (ShowGameTitle)
                    {
                        <div class="game-preview">
                            <div class="game-preview-bg" style="@GetGameBgStyle(SelectedGame)"></div>
                            <div class="game-preview-content">
                                <div class="game-preview-title">@(SelectedGame?.Title ?? "")</div>
                                <div class="game-preview-subtitle">Classic Snake with Enhanced Features</div>
    <div class="game-preview-description">
        <div>Guide your snake to collect apples and grow longer.</div>
        <div>Features: Multiple speeds, map sizes, and apple modes.</div>
    </div>
                        </div>
                    </div>
                }
                else if (IsGamePlaying && SelectedGame is not null)
                {
                    <iframe class="game-iframe" src="@SelectedGame.Url" frameborder="0"></iframe>
                }
            </div> <!-- end crt-screen -->
        </div> <!-- end crt-monitor -->
        
        <!-- Game List / Panel -->
        @if (PanelVisible)
        {
            <div class="game-panel">
                <div class="game-list">
                    @foreach (var game in Games)
                    {
                        <div class="game-list-item" style="background:@GetGameColor(game)" @onclick="() => SelectGame(game)" @onmouseover="PlayHoverSound" title="@game.Title">
                            <span class="game-emoji">@GetGameEmoji(game)</span>
                            <span class="game-title">@game.Title</span>
                        </div>
                    }
                </div>
                <div class="panel-controls">
                    <button class="btn" @onclick="PlayGame" disabled="@(SelectedGame is null)">Play</button>
                    <button class="btn" @onclick="RetryGame" disabled="@(!IsGamePlaying)">Retry</button>
                    <button class="btn" @onclick="ExitGame" disabled="@(!IsGamePlaying)">Exit</button>
                    <button class="btn" @onclick="TogglePanel">Hide Panel</button>
                </div>
            </div>
        }
        else
        {
            <button class="btn show-panel-btn" @onclick="TogglePanel">Show Panel</button>
        }
        
        <!-- Audio Toggle -->
        <button class="audio-toggle" @onclick="() => AudioEnabled = !AudioEnabled" title="Toggle Audio">
            <span class="audio-icon">@(AudioEnabled ? "🔊" : "🔇")</span>
        </button>
        
        <!-- Mobile Controls (JS) -->
        <div id="mobile-controls"></div>
        
    </div> <!-- end emulator-layout -->
    </div> <!-- end emulator-console -->
</div> <!-- end retro-emulator-container -->
@code {
    [Inject] public IJSRuntime JSRuntime { get; set; } = default!;
    [Parameter] public EventCallback OnClose { get; set; }

    public class GameInfo
    {
        public string Title { get; set; } = string.Empty;
        public string? Url { get; set; }
        public string? Emoji { get; set; }
        public string? Bg { get; set; }
    }

    List<GameInfo> Games = new()
    {
        new GameInfo { Title = "Snake Game", Url = "/wwwroot/games/snake.html", Emoji = "🐍", Bg = "linear-gradient(135deg,#2ecc40,#27ae60)" },
        new GameInfo { Title = "Tetris", Url = "/wwwroot/games/tetris.html", Emoji = "🧱", Bg = "linear-gradient(135deg,#3498db,#2980b9)" },
        new GameInfo { Title = "Pong", Url = "/wwwroot/games/pong.html", Emoji = "🏓", Bg = "linear-gradient(135deg,#00bfff,#1e90ff)" },
        new GameInfo { Title = "Asteroids", Url = "/wwwroot/games/asteroids.html", Emoji = "☄️", Bg = "linear-gradient(135deg,#8e44ad,#6c3483)" },
        new GameInfo { Title = "Pac-Man", Url = "/wwwroot/games/pacman.html", Emoji = "🟡", Bg = "linear-gradient(135deg,#f1c40f,#f39c12)" },
        new GameInfo { Title = "Space Invaders", Url = "/wwwroot/games/space-invaders.html", Emoji = "👾", Bg = "linear-gradient(135deg,#e74c3c,#c0392b)" },
    };

    bool ShowWelcome = true;
    string WelcomeAnimKey = Guid.NewGuid().ToString();
    string GameAnimKey = Guid.NewGuid().ToString();
    GameInfo? SelectedGame = null;
    bool IsGamePlaying = false;
    bool PanelVisible = true;
    bool AudioEnabled = true;

    bool ShowGameTitle => SelectedGame is not null && !IsGamePlaying && !ShowWelcome;

    string GetGameEmoji(GameInfo game) => game.Emoji ?? "❓";
    string GetGameColor(GameInfo game)
    {
        return game.Title switch
        {
            "Snake Game" => "#2ecc40",
            "Tetris" => "#3498db",
            "Pong" => "#00bfff",
            "Asteroids" => "#8e44ad",
            "Pac-Man" => "#f1c40f",
            "Space Invaders" => "#e74c3c",
            _ => "#888"
        };
    }

    string? GetGameBgStyle(GameInfo? game)
    {
        if (game?.Bg is not null)
            return $"background: {game.Bg};";
        return null;
    }

    void SelectGame(GameInfo game)
    {
        SelectedGame = game;
        IsGamePlaying = false;
        ShowWelcome = false;
        PanelVisible = true;
        PlayClickSound();
        StateHasChanged();
        Task.Delay(10).ContinueWith(_ => {
            GameAnimKey = Guid.NewGuid().ToString();
            InvokeAsync(StateHasChanged);
        });
    }

    void PlayGame()
    {
        if (SelectedGame is not null)
        {
            IsGamePlaying = true;
            ShowWelcome = false;
            PanelVisible = true;
            PlayClickSound();
            InvokeAsync(async () =>
            {
                await Task.Delay(1000);
                await JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", true);
            });
        }
    }

    void ExitGame()
    {
        IsGamePlaying = false;
        SelectedGame = null;
        ShowWelcome = true;
        PanelVisible = true;
        WelcomeAnimKey = Guid.NewGuid().ToString();
        PlayClickSound();
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", false));
        WelcomeAnimKey = Guid.NewGuid().ToString();
    }

    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            PlayClickSound();
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => {
                IsGamePlaying = true;
                ShowWelcome = false;
                GameAnimKey = Guid.NewGuid().ToString();
                InvokeAsync(StateHasChanged);
            });
        }
    }

    void TogglePanel()
    {
        PanelVisible = !PanelVisible;
        PlayClickSound();
    }

    void PlayHoverSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonHover"));
    }

    void PlayClickSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonClick"));
    }

    void PlayBootSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "bootSound"));
    }

    void SendGameInput(string keyCode)
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.sendGameInput", keyCode));
    }

    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }

    protected override void OnParametersSet()
    {
        if (SelectedGame is null && !IsGamePlaying)
            ShowWelcome = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "powerOn");
            await Task.Delay(4000);
            if (ShowWelcome)
            {
                ShowWelcome = false;
                StateHasChanged();
            }
            await JSRuntime.InvokeVoidAsync("eval", "if (window.retroEmulator.detectMobile()) { document.body.classList.add('mobile-device'); console.log('[RetroEmulator] Mobile device detected'); } else { document.body.classList.add('desktop-device'); console.log('[RetroEmulator] Desktop device detected'); }");
        }
    }
}
        PanelVisible = true;
        WelcomeAnimKey = Guid.NewGuid().ToString();
        PlayClickSound();
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", false));
        WelcomeAnimKey = Guid.NewGuid().ToString();
    }

    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            PlayClickSound();
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => {
                IsGamePlaying = true;
                ShowWelcome = false;
                GameAnimKey = Guid.NewGuid().ToString();
                InvokeAsync(StateHasChanged);
            });
        }
    }

    void TogglePanel()
    {
        PanelVisible = !PanelVisible;
        PlayClickSound();
    }

    void PlayHoverSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonHover"));
    }

    void PlayClickSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonClick"));
    }

    void PlayBootSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "bootSound"));
    }

    void SendGameInput(string keyCode)
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.sendGameInput", keyCode));
    }

    [Parameter] public EventCallback OnClose { get; set; }
    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }

    bool ShowGameTitle => SelectedGame is not null && !IsGamePlaying && !ShowWelcome;

    string? GetGameBgStyle(GameInfo? game)
    {
        if (game?.Bg is not null)
            return $"background: {game.Bg};";
        return null;
    }

    protected override void OnParametersSet()
    {
        if (SelectedGame is null && !IsGamePlaying)
            ShowWelcome = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "powerOn");
            await Task.Delay(4000);
            if (ShowWelcome)
            {
                ShowWelcome = false;
                StateHasChanged();
            }
            await JSRuntime.InvokeVoidAsync("eval", "if (window.retroEmulator.detectMobile()) { document.body.classList.add('mobile-device'); console.log('[RetroEmulator] Mobile device detected'); } else { document.body.classList.add('desktop-device'); console.log('[RetroEmulator] Desktop device detected'); }");
        }
    }
}
    };

    bool ShowWelcome = true;
    string WelcomeAnimKey = Guid.NewGuid().ToString();
    string GameAnimKey = Guid.NewGuid().ToString();

    GameInfo? SelectedGame = null;
    bool IsGamePlaying = false;
    bool PanelVisible = true; // Start with panel visible
    bool AudioEnabled = true;

    string GetGameEmoji(GameInfo game) => game.Emoji ?? "❓";
    string GetGameColor(GameInfo game)
    {
        return game.Title switch
        {
            "Snake Game" => "#2ecc40",
            "Tetris" => "#3498db",
            "Pong" => "#00bfff",
            "Asteroids" => "#8e44ad",
            "Pac-Man" => "#f1c40f",
            "Space Invaders" => "#e74c3c",
            _ => "#888"
        };
    }

    void SelectGame(GameInfo game)
    {
        SelectedGame = game;
        IsGamePlaying = false;
        ShowWelcome = false;
        PanelVisible = true;
        PlayClickSound();
        StateHasChanged();
        Task.Delay(10).ContinueWith(_ => {
            GameAnimKey = Guid.NewGuid().ToString();
            InvokeAsync(StateHasChanged);
        });
    }

    void PlayGame()
    {
        if (SelectedGame is not null)
        {
            IsGamePlaying = true;
            ShowWelcome = false;
            PanelVisible = true;
            PlayClickSound();
            InvokeAsync(async () =>
            {
                await Task.Delay(1000);
                await JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", true);
            });
        }
    }

    void ExitGame()
    {
        IsGamePlaying = false;
        SelectedGame = null;
        ShowWelcome = true;
        PanelVisible = true;
        WelcomeAnimKey = Guid.NewGuid().ToString();
        PlayClickSound();
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", false));
        WelcomeAnimKey = Guid.NewGuid().ToString();
    }

    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            PlayClickSound();
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => {
                IsGamePlaying = true;
                ShowWelcome = false;
                GameAnimKey = Guid.NewGuid().ToString();
                InvokeAsync(StateHasChanged);
            });
        }
    }

    void TogglePanel()
    {
        PanelVisible = !PanelVisible;
        PlayClickSound();
    }

    void PlayHoverSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonHover"));
    }

    void PlayClickSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonClick"));
    }

    void PlayBootSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "bootSound"));
    }

    void SendGameInput(string keyCode)
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.sendGameInput", keyCode));
    }

    [Parameter] public EventCallback OnClose { get; set; }
    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }

    bool ShowGameTitle => SelectedGame is not null && !IsGamePlaying && !ShowWelcome;


    string? GetGameBgStyle(GameInfo? game)
    {
        if (game?.Bg is not null)
            return $"background: {game.Bg};";
        return null;
    }

    protected override void OnParametersSet()
    {
        if (SelectedGame is null && !IsGamePlaying)
            ShowWelcome = true;
    }

}