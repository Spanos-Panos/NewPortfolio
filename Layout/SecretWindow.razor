





@* SecretWindow.razor: Modern, responsive secret game window *@
<div class="secret-retro-bg" @onwheel:preventDefault tabindex="-1">
    <div class="secret-retro-window" tabindex="0">
        <div class="retro-header">
            <span class="retro-title">SECRET GAME HUB</span>
            <button class="retro-close-btn" @onclick="OnCloseClicked" title="Close">✖</button>
        </div>
        <div class="retro-main-screen">
            @if (ShowWelcome)
            {
                <div class="retro-animated-panel retro-welcome-panel @(WelcomeAnimKey)" key="@WelcomeAnimKey">
                    <div class="retro-welcome-bg"></div>
                    <span class="retro-welcome-label-animated">WELCOME</span>
                </div>
            }
            else if (ShowGameTitle)
            {
                <div class="retro-animated-panel retro-game-title-panel" @key="GameAnimKey">
                    <div class="retro-game-bg" style="@GetGameBgStyle(SelectedGame)"></div>
                    <span class="retro-game-title-animated-2">@(SelectedGame?.Title ?? "")</span>
                </div>
            }
            else if (IsGamePlaying && SelectedGame is not null)
            {
                <div style="width:100%;min-height:320px;max-width:100vw;background:#18120a;border:2px solid #3a3a3a;border-radius:14px;box-shadow:0 2px 18px #0008,0 0 0 1.5px #6cf;padding:1em 0.5em;display:flex;flex-direction:column;align-items:center;justify-content:flex-start;">
                    @if (!string.IsNullOrWhiteSpace(SelectedGame?.Url))
                    {
                        <iframe src="@SelectedGame.Url" frameborder="0" class="retro-game-iframe" style="margin-top:0.7em;min-height:220px;background:#222;border-radius:10px;width:100%;max-width:100%;display:block;"></iframe>
                    }
                    else
                    {
                        <div style="width:100%;color:#ff3b3b;text-align:center;padding:1em 0.5em;font-family:'VT323',monospace;background:rgba(0,0,0,0.85);border-radius:10px;">
                            No game URL set for this game.<br />
                            Please check your game list configuration.
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="retro-screen-placeholder">
                    <span class="retro-screen-label">GAME SCREEN</span>
                </div>
            }
        </div>
        <div class="retro-game-list" style="width:100%;max-width:600px;align-items:stretch;">
            <div class="retro-list-label">GAMES</div>
            <div class="retro-game-grid" style="width:100%;">
                @for (int i = 0; i < 6; i++)
                {
                    var game = Games.Count > i ? Games[i] : null;
                    if (game is not null)
                    {
                        <div class="retro-game-item @(SelectedGame == game ? "selected" : null)" style="width:100%;" @onclick="() => SelectGame(game)">
                            <span class="retro-emoji-icon" style="background:@GetGameColor(game)">@GetGameEmoji(game)</span>
                            <span class="retro-game-title">@game.Title</span>
                        </div>
                    }
                    else
                    {
                        <div style="width:100%;"></div>
                    }
                }
            </div>
            <div class="retro-controls" style="width:100%;justify-content:space-between;margin:0.2em 0 0 0;">
                <button class="retro-btn retro-exit" style="flex:1;max-width:33%;" @onclick="ExitGame">Exit</button>
                <button class="retro-btn retro-play" style="flex:1;max-width:33%;" @onclick="PlayGame" disabled="@(SelectedGame is null)">Play</button>
                <button class="retro-btn retro-retry" style="flex:1;max-width:33%;" @onclick="RetryGame" disabled="@(!IsGamePlaying)">Retry</button>
            </div>
        </div>
    </div>
</div>



@code {
    List<GameInfo> Games = new() {
        new GameInfo {
            Title = ".NET Snake", Emoji = "🐍", Url = "/games/snake.html",
            Bg = "radial-gradient(circle at 50% 60%, #2ecc40 0%, #00e6ff 60%, #000 100%)"
        }
    };
    bool ShowWelcome = true;
    string WelcomeAnimKey = Guid.NewGuid().ToString();
    string GameAnimKey = Guid.NewGuid().ToString();

    GameInfo? SelectedGame = null;
    bool IsGamePlaying = false;

    string GetGameEmoji(GameInfo game) => game.Emoji ?? "❓";
    string GetGameColor(GameInfo game)
    {
        return game.Title switch
        {
            ".NET Snake" => "#2ecc40",
            "Slide Puzzle" => "#f1c40f",
            "Tower Builder" => "#8e44ad",
            "Tetris" => "#3498db",
            "Minesweeper" => "#e74c3c",
            "About Me Quiz" => "#ff9800",
            _ => "#888"
        };
    }

    void SelectGame(GameInfo game)
    {
        SelectedGame = game;
        IsGamePlaying = false;
        ShowWelcome = false;
        // Retrigger game title animation by toggling ShowGameTitle and updating key
        StateHasChanged();
        Task.Delay(10).ContinueWith(_ => {
            GameAnimKey = Guid.NewGuid().ToString();
            InvokeAsync(StateHasChanged);
        });
    }

    void PlayGame()
    {
        if (SelectedGame is not null)
        {
            IsGamePlaying = true;
            ShowWelcome = false;
        }
    }

    void ExitGame()
    {
        IsGamePlaying = false;
        SelectedGame = null;
        ShowWelcome = true;
        // Force welcome animation replay by changing key
        WelcomeAnimKey = Guid.NewGuid().ToString();
    }

    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => {
                IsGamePlaying = true;
                ShowWelcome = false;
                GameAnimKey = Guid.NewGuid().ToString();
                InvokeAsync(StateHasChanged);
            });
        }
    }

    [Parameter] public EventCallback OnClose { get; set; }
    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }

    // Helper to show animated game title
    bool ShowGameTitle => SelectedGame is not null && !IsGamePlaying && !ShowWelcome;

    // Add GameInfo class for dynamic game data
    public class GameInfo
    {
        public string? Title { get; set; }
        public string? Emoji { get; set; }
        public string? Url { get; set; }
        public string? Bg { get; set; } // background gradient/color for game panel
    }

    string? GetGameBgStyle(GameInfo? game)
    {
        if (game?.Bg is not null)
            return $"background: {game.Bg};";
        return null;
    }

    protected override void OnParametersSet()
    {
        if (SelectedGame is null && !IsGamePlaying)
            ShowWelcome = true;
    }
}


