





@using Microsoft.JSInterop

@* SecretWindow.razor: Enhanced Retro Game Emulator *@
<div class="retro-emulator-container" @onwheel:preventDefault tabindex="-1">
    
    <!-- CRT Screen Effects -->
    <div class="crt-overlay"></div>
    <div class="crt-scanlines"></div>
    <div class="crt-flicker"></div>
    
    <!-- Emulator Console -->
    <div class="retro-console" tabindex="0">
        <!-- Console Header -->
        <div class="console-header">
            <div class="console-brand">RETRO-EMU v3.0</div>
            <div class="console-power">
                <span class="power-led @(IsGamePlaying ? "active" : "")"></span>
                <button class="power-btn" @onclick="OnCloseClicked" title="Power Off">⏻</button>
            </div>
        </div>

        <!-- Main Layout Container -->
        <div class="emulator-layout @(IsGamePlaying ? "game-mode" : "menu-mode")">
            
            <!-- CRT Monitor Screen -->
            <div class="crt-monitor">
                <div class="crt-screen">
                    @if (ShowWelcome)
                    {
                        <div class="boot-screen">
                            <div class="boot-text">
                                <div class="boot-line">RETRO-EMU SYSTEM v3.0</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line">Initializing Hardware...</div>
                                <div class="boot-line">CPU: Z80A at 4MHz ✓</div>
                                <div class="boot-line">Memory: 64KB RAM ✓</div>
                                <div class="boot-line">Graphics: VDP ✓</div>
                                <div class="boot-line">Sound: Enhanced PSG ✓</div>
                                <div class="boot-line">Controllers: 2P ✓</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line">Loading Game Library...</div>
                                <div class="boot-line">Found @(Games.Count) cartridge(s)</div>
                                <div class="boot-line">Audio System: Ready ✓</div>
                                <div class="boot-line">══════════════════════</div>
                                <div class="boot-line terminal-cursor">System Ready</div>
                            </div>
                        </div>
                    }
                    else if (ShowGameTitle)
                    {
                        <div class="game-preview">
                            <div class="game-preview-bg" style="@GetGameBgStyle(SelectedGame)"></div>
                            <div class="game-preview-content">
                                <div class="game-preview-title">@(SelectedGame?.Title ?? "")</div>
                                <div class="game-preview-subtitle">Classic Snake with Enhanced Features</div>
                                <div class="game-preview-description">
                                    <div>Guide your snake to collect apples and grow longer.</div>
                                    <div>Features: Multiple speeds, map sizes, and apple modes.</div>
                                    <div>Avoid walls and your own tail to survive!</div>
                                </div>
                                <div class="game-preview-hint">Press PLAY to load game menu</div>
                            </div>
                        </div>
                    }
                    else if (IsGamePlaying && SelectedGame is not null)
                    {
                        <div class="game-viewport">
                            @if (!string.IsNullOrWhiteSpace(SelectedGame?.Url))
                            {
                                <iframe src="@SelectedGame.Url" frameborder="0" class="game-frame" id="game-frame"></iframe>
                            }
                            else
                            {
                                <div class="game-error">
                                    <div>GAME ERROR</div>
                                    <div>No ROM file found</div>
                                    <div>Check cartridge</div>
                                </div>
                            }
                        </div>
                        
                        <!-- Mobile Touch Controls -->
                        <div class="mobile-controls" id="mobile-controls">
                            <div class="mobile-dpad">
                                <button class="dpad-btn dpad-up" @ontouchstart="() => SendGameInput(ArrowUpKey)" @ontouchstart:preventDefault="true">▲</button>
                                <div class="dpad-middle">
                                    <button class="dpad-btn dpad-left" @ontouchstart="() => SendGameInput(ArrowLeftKey)" @ontouchstart:preventDefault="true">◀</button>
                                    <div class="dpad-center"></div>
                                    <button class="dpad-btn dpad-right" @ontouchstart="() => SendGameInput(ArrowRightKey)" @ontouchstart:preventDefault="true">▶</button>
                                </div>
                                <button class="dpad-btn dpad-down" @ontouchstart="() => SendGameInput(ArrowDownKey)" @ontouchstart:preventDefault="true">▼</button>
                            </div>
                            <div class="mobile-action-buttons">
                                <button class="action-btn pause-btn" @ontouchstart="() => SendGameInput(EscapeKey)" @ontouchstart:preventDefault="true">⏸</button>
                                <button class="action-btn restart-btn" @ontouchstart="() => SendGameInput(RestartKey)" @ontouchstart:preventDefault="true">↻</button>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="idle-screen">
                            <div class="idle-text">INSERT CARTRIDGE</div>
                            <div class="idle-blink">▶</div>
                        </div>
                    }
                </div>
                
                <!-- CRT Bezel -->
                <div class="crt-bezel"></div>
            </div>

            <!-- Enhanced Side Panel with Toggle -->
            <div class="side-panel @(PanelVisible ? "visible" : "hidden")">
                <div class="cartridge-slot">
                    <div class="slot-label">GAME CARTRIDGES</div>
                    
                    <div class="cartridge-grid">
                        @for (int i = 0; i < 6; i++)
                        {
                            var game = Games.Count > i ? Games[i] : null;
                            if (game is not null)
                            {
                                <div class="cartridge @(SelectedGame == game ? "selected" : "")" @onclick="() => SelectGame(game)" @onmouseenter="PlayHoverSound">
                                    <div class="cartridge-label">@game.Title</div>
                                    <div class="cartridge-icon">@GetGameEmoji(game)</div>
                                </div>
                            }
                            else
                            {
                                <div class="cartridge empty">
                                    <div class="cartridge-label">EMPTY</div>
                                    <div class="cartridge-icon">∅</div>
                                </div>
                            }
                        }
                    </div>
                    
                    <!-- Game Controls moved here -->
                    <div class="cartridge-controls">
                        <button class="cartridge-btn play @(SelectedGame is null ? "disabled" : "")" @onclick="PlayGame" @onmouseenter="PlayHoverSound" disabled="@(SelectedGame is null)">
                            <span class="btn-icon">▶</span>
                            <span class="btn-label">PLAY</span>
                        </button>
                        <button class="cartridge-btn reset @(!IsGamePlaying ? "disabled" : "")" @onclick="RetryGame" @onmouseenter="PlayHoverSound" disabled="@(!IsGamePlaying)">
                            <span class="btn-icon">↻</span>
                            <span class="btn-label">RESTART</span>
                        </button>
                        <button class="cartridge-btn eject" @onclick="ExitGame" @onmouseenter="PlayHoverSound">
                            <span class="btn-icon">⏏</span>
                            <span class="btn-label">EJECT</span>
                        </button>
                    </div>
                </div>

                <!-- Audio Status -->
                <div class="audio-status">
                    <span class="audio-indicator @(AudioEnabled ? "active" : "inactive")"></span>
                    <span class="audio-label">AUDIO: @(AudioEnabled ? "ON" : "OFF")</span>
                </div>
            </div>

            <!-- Panel Toggle Button (Always Visible) -->
            <button class="panel-toggle-btn" @onclick="TogglePanel" @onmouseenter="PlayHoverSound" title="@(PanelVisible ? "Hide Panel" : "Show Panel")">
                <span class="toggle-icon">@(PanelVisible ? "◀" : "▶")</span>
            </button>
        </div>
    </div>
</div>

<script src="/Assets/sounds/retro-sounds.js"></script>
<script>
    window.retroEmulator = {
        playSound: function(soundId) {
            try {
                // Use the new retro sounds system
                if (window.retroSounds && window.retroSounds.initialized) {
                    switch(soundId) {
                        case 'powerOn':
                            window.retroSounds.playSound('powerOn');
                            break;
                        case 'buttonHover':
                            window.retroSounds.playSound('hover');
                            break;
                        case 'buttonClick':
                            window.retroSounds.playSound('click');
                            break;
                        case 'cartridgeInsert':
                            window.retroSounds.playSound('insert');
                            break;
                        case 'bootSound':
                            window.retroSounds.playSound('boot');
                            break;
                        default:
                            console.log('Unknown sound ID:', soundId);
                    }
                } else {
                    // Fallback to old system
                    this.generateSoundEffect(soundId);
                }
            } catch (e) {
                console.log('Audio error:', e);
            }
        },
        
        generateSoundEffect: function(soundId) {
            try {
                const audioContext = new (window.AudioContext || window.webkitAudioContext)();
                const oscillator = audioContext.createOscillator();
                const gainNode = audioContext.createGain();
                
                oscillator.connect(gainNode);
                gainNode.connect(audioContext.destination);
                
                switch(soundId) {
                    case 'powerOn':
                        oscillator.frequency.setValueAtTime(440, audioContext.currentTime);
                        oscillator.frequency.exponentialRampToValueAtTime(880, audioContext.currentTime + 0.1);
                        oscillator.frequency.exponentialRampToValueAtTime(220, audioContext.currentTime + 0.3);
                        gainNode.gain.setValueAtTime(0.3, audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.5);
                        oscillator.start(audioContext.currentTime);
                        oscillator.stop(audioContext.currentTime + 0.5);
                        break;
                    case 'buttonHover':
                        oscillator.frequency.value = 800;
                        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.1);
                        oscillator.start(audioContext.currentTime);
                        oscillator.stop(audioContext.currentTime + 0.1);
                        break;
                    case 'buttonClick':
                        oscillator.frequency.value = 1200;
                        gainNode.gain.setValueAtTime(0.2, audioContext.currentTime);
                        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
                        oscillator.start(audioContext.currentTime);
                        oscillator.stop(audioContext.currentTime + 0.15);
                        break;
                }
            } catch (e) {
                console.log('Fallback audio error:', e);
            }
        },
        
        initAudio: function() {
            // Initialize the retro sounds system
            if (window.retroSounds) {
                window.retroSounds.init().then(() => {
                    console.log('[RetroEmulator] Sound system initialized');
                }).catch(e => {
                    console.log('[RetroEmulator] Sound initialization failed:', e);
                });
            }
        },
        
        sendGameInput: function(keyCode) {
            // Send input to the game iframe
            try {
                const gameFrame = document.getElementById('game-frame');
                if (gameFrame && gameFrame.contentWindow) {
                    // Create a keyboard event and send it to the game
                    const event = new KeyboardEvent('keydown', {
                        key: keyCode,
                        code: keyCode,
                        keyCode: this.getKeyCodeNumber(keyCode),
                        which: this.getKeyCodeNumber(keyCode),
                        bubbles: true,
                        cancelable: true
                    });
                    gameFrame.contentWindow.document.dispatchEvent(event);
                    console.log('[RetroEmulator] Sent input:', keyCode);
                }
            } catch (e) {
                console.log('[RetroEmulator] Input error:', e);
            }
        },
        
        getKeyCodeNumber: function(keyCode) {
            const keyCodes = {
                'ArrowUp': 38,
                'ArrowDown': 40,
                'ArrowLeft': 37,
                'ArrowRight': 39,
                'Escape': 27,
                'KeyR': 82,
                'Enter': 13,
                'Space': 32
            };
            return keyCodes[keyCode] || 0;
        },
        
        detectMobile: function() {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) || 
                   (window.innerWidth <= 768);
        },
        
        toggleMobileControls: function(show) {
            const controls = document.getElementById('mobile-controls');
            if (controls) {
                controls.style.display = show && this.detectMobile() ? 'flex' : 'none';
            }
        }
    };
    
    // Initialize audio on first user interaction
    document.addEventListener('click', function initAudio() {
        window.retroEmulator.initAudio();
        document.removeEventListener('click', initAudio);
    }, { once: true });
    
    // Also initialize on keydown
    document.addEventListener('keydown', function initAudio() {
        window.retroEmulator.initAudio();
        document.removeEventListener('keydown', initAudio);
    }, { once: true });
</script>



@code {
    [Inject] IJSRuntime JSRuntime { get; set; } = default!;
    
    // Key constants for mobile controls
    private const string ArrowUpKey = "ArrowUp";
    private const string ArrowDownKey = "ArrowDown";
    private const string ArrowLeftKey = "ArrowLeft";
    private const string ArrowRightKey = "ArrowRight";
    private const string EscapeKey = "Escape";
    private const string RestartKey = "KeyR";
    
    List<GameInfo> Games = new() {
        new GameInfo {
            Title = "Snake Game", Emoji = "🐍", Url = "/games/snake.html",
            Bg = "radial-gradient(circle at 50% 60%, #00e6ff 0%, #80ff80 40%, #001122 100%)"
        },
        new GameInfo {
            Title = "Tetris", Emoji = "🧩", Url = "/games/tetris.html",
            Bg = "radial-gradient(circle at 50% 60%, #ff6600 0%, #ffaa00 40%, #330011 100%)"
        },
        new GameInfo {
            Title = "Pong", Emoji = "🏓", Url = "/games/pong.html",
            Bg = "radial-gradient(circle at 50% 60%, #00ff00 0%, #88ff88 40%, #001100 100%)"
        },
        new GameInfo {
            Title = "Asteroids", Emoji = "🚀", Url = "/games/asteroids.html",
            Bg = "radial-gradient(circle at 50% 60%, #8800ff 0%, #cc66ff 40%, #110022 100%)"
        },
        new GameInfo {
            Title = "Pac-Man", Emoji = "👻", Url = "/games/pacman.html",
            Bg = "radial-gradient(circle at 50% 60%, #ffff00 0%, #ffcc00 40%, #332200 100%)"
        },
        new GameInfo {
            Title = "Space Invaders", Emoji = "👾", Url = "/games/space-invaders.html",
            Bg = "radial-gradient(circle at 50% 60%, #ff0066 0%, #ff6699 40%, #220011 100%)"
        }
    };
    
    bool ShowWelcome = true;
    string WelcomeAnimKey = Guid.NewGuid().ToString();
    string GameAnimKey = Guid.NewGuid().ToString();
    
    GameInfo? SelectedGame = null;
    bool IsGamePlaying = false;
    bool PanelVisible = true; // Start with panel visible
    bool AudioEnabled = true;

    string GetGameEmoji(GameInfo game) => game.Emoji ?? "❓";
    
    string GetGameColor(GameInfo game)
    {
        return game.Title switch
        {
            ".NET Snake" => "#2ecc40",
            "Slide Puzzle" => "#f1c40f",
            "Tower Builder" => "#8e44ad",
            "Tetris" => "#3498db",
            "Minesweeper" => "#e74c3c",
            "About Me Quiz" => "#ff9800",
            _ => "#888"
        };
    }

    void SelectGame(GameInfo game)
    {
        SelectedGame = game;
        IsGamePlaying = false;
        ShowWelcome = false;
        PanelVisible = true; // Keep panel visible when selecting
        PlayClickSound();
        StateHasChanged();
        Task.Delay(10).ContinueWith(_ => {
            GameAnimKey = Guid.NewGuid().ToString();
            InvokeAsync(StateHasChanged);
        });
    }

    void PlayGame()
    {
        if (SelectedGame is not null)
        {
            IsGamePlaying = true;
            ShowWelcome = false;
            PanelVisible = true; // Start with panel visible
            PlayClickSound();
            
            // Enable mobile controls after a short delay to let the iframe load
            InvokeAsync(async () =>
            {
                await Task.Delay(1000);
                await JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", true);
            });
        }
    }

    void ExitGame()
    {
        IsGamePlaying = false;
        SelectedGame = null;
        ShowWelcome = true;
        PanelVisible = true; // Reset to visible
        WelcomeAnimKey = Guid.NewGuid().ToString();
        PlayClickSound();
        
        // Hide mobile controls
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.toggleMobileControls", false));
    }

    void RetryGame()
    {
        if (IsGamePlaying)
        {
            IsGamePlaying = false;
            PlayClickSound();
            StateHasChanged();
            Task.Delay(100).ContinueWith(_ => {
                IsGamePlaying = true;
                ShowWelcome = false;
                GameAnimKey = Guid.NewGuid().ToString();
                InvokeAsync(StateHasChanged);
            });
        }
    }

    void TogglePanel()
    {
        PanelVisible = !PanelVisible;
        PlayClickSound();
    }

    // Sound effect methods
    void PlayHoverSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonHover"));
    }

    void PlayClickSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "buttonClick"));
    }

    void PlayBootSound()
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "bootSound"));
    }
    
    void SendGameInput(string keyCode)
    {
        InvokeAsync(() => JSRuntime.InvokeVoidAsync("retroEmulator.sendGameInput", keyCode));
    }

    [Parameter] public EventCallback OnClose { get; set; }
    void OnCloseClicked() { if (OnClose.HasDelegate) OnClose.InvokeAsync(); }

    bool ShowGameTitle => SelectedGame is not null && !IsGamePlaying && !ShowWelcome;

    public class GameInfo
    {
        public string? Title { get; set; }
        public string? Emoji { get; set; }
        public string? Url { get; set; }
        public string? Bg { get; set; }
    }

    string? GetGameBgStyle(GameInfo? game)
    {
        if (game?.Bg is not null)
            return $"background: {game.Bg};";
        return null;
    }

    protected override void OnParametersSet()
    {
        if (SelectedGame is null && !IsGamePlaying)
            ShowWelcome = true;
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Play boot sound after component renders
            await Task.Delay(500);
            await JSRuntime.InvokeVoidAsync("retroEmulator.playSound", "powerOn");
            
            // Auto-transition from boot screen after 4 seconds
            await Task.Delay(4000);
            if (ShowWelcome)
            {
                ShowWelcome = false;
                StateHasChanged();
            }
            
            // Set up mobile detection and responsive adjustments
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.retroEmulator.detectMobile()) {
                    document.body.classList.add('mobile-device');
                    console.log('[RetroEmulator] Mobile device detected');
                } else {
                    document.body.classList.add('desktop-device');
                    console.log('[RetroEmulator] Desktop device detected');
                }
            ");
        }
    }
}


